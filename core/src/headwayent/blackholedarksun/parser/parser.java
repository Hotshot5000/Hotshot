
/*
 * Created by Sebastian Bugiu on 4/9/23, 10:11 PM
 * sebastian.bugiu@headwayentertainment.net
 * Last modified 8/8/21, 5:10 AM
 * Copyright (c) 2023.
 * All rights reserved.
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package headwayent.blackholedarksun.parser;

import headwayent.blackholedarksun.parser.*;
import headwayent.blackholedarksun.parser.ast.*;
import java.util.HashMap;
import java.util.ArrayList;
import headwayent.hotshotengine.ENG_Vector2D;
import headwayent.hotshotengine.ENG_Vector3D;
import headwayent.hotshotengine.ENG_Vector4D;
import headwayent.hotshotengine.ENG_Quaternion;
import headwayent.hotshotengine.renderer.ENG_ColorValue;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short[][] _production_table =
    unpackFromStrings(new String[] {
    "\000\137\000\002\004\007\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\026\003\000\002\026\004\000\002" +
    "\027\006\000\002\027\006\000\002\027\006\000\002\027" +
    "\006\000\002\014\003\000\002\014\004\000\002\013\006" +
    "\000\002\013\007\000\002\013\004\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\006\000\002\013\006\000\002\013\005\000\002\013\005" +
    "\000\002\016\003\000\002\016\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\006\000\002\015\006\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\020\003" +
    "\000\002\020\004\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\010\003\000\002\010\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\007\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\002\003\000\002\002\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\006\000\002\006\007\000" +
    "\002\006\004\000\002\011\003\000\002\011\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\021\004\000\002\022\005\000\002\023\006\000\002" +
    "\025\006\000\002\024\006\000\002\030\003\000\002\030" +
    "\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\012\005\001\002\000\004\002\337\001" +
    "\002\000\004\010\006\001\002\000\004\004\007\001\002" +
    "\000\016\013\016\024\014\051\011\055\013\062\017\063" +
    "\012\001\002\000\020\005\336\013\016\024\014\051\011" +
    "\055\013\062\017\063\012\001\002\000\004\004\332\001" +
    "\002\000\004\004\327\001\002\000\004\004\324\001\002" +
    "\000\004\004\153\001\002\000\020\005\uffff\013\uffff\024" +
    "\uffff\051\uffff\055\uffff\062\uffff\063\uffff\001\002\000\004" +
    "\004\065\001\002\000\004\004\020\001\002\000\022\036" +
    "\024\037\022\045\026\046\027\047\030\056\021\057\023" +
    "\060\025\001\002\000\004\010\062\001\002\000\004\011" +
    "\056\001\002\000\004\011\036\001\002\000\004\011\036" +
    "\001\002\000\004\010\050\001\002\000\004\006\046\001" +
    "\002\000\004\006\041\001\002\000\004\011\036\001\002" +
    "\000\024\005\033\036\024\037\022\045\026\046\027\047" +
    "\030\056\021\057\023\060\025\001\002\000\024\005\uffe1" +
    "\036\uffe1\037\uffe1\045\uffe1\046\uffe1\047\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\001\002\000\020\005\ufffa\013\ufffa\024\ufffa" +
    "\051\ufffa\055\ufffa\062\ufffa\063\ufffa\001\002\000\024\005" +
    "\uffe0\036\uffe0\037\uffe0\045\uffe0\046\uffe0\047\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\001\002\000\024\005\uffd8\036\uffd8\037" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\001\002\000\004\011\037\001\002\000\004\011\040\001" +
    "\002\000\120\005\uffa9\006\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\001\002\000\010\052\045\053\043\054\042" +
    "\001\002\000\062\005\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\036\uffa5\037\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\001\002\000\062\005\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\036\uffa3\037\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\001\002\000\024\005\uffd9\036\uffd9\037\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\056\uffd9\057\uffd9\060\uffd9\001\002\000\062" +
    "\005\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\036\uffa4\037\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\064\uffa4\065\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002\000\010" +
    "\052\045\053\043\054\042\001\002\000\024\005\uffda\036" +
    "\uffda\037\uffda\045\uffda\046\uffda\047\uffda\056\uffda\057\uffda" +
    "\060\uffda\001\002\000\024\005\uffdb\036\uffdb\037\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\056\uffdb\057\uffdb\060\uffdb\001\002" +
    "\000\024\005\uffd7\036\uffd7\037\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\056\uffd7\057\uffd7\060\uffd7\001\002\000\026\005\uffdf" +
    "\006\053\036\uffdf\037\uffdf\045\uffdf\046\uffdf\047\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\001\002\000\010\052\045\053\043" +
    "\054\042\001\002\000\024\005\uffdd\036\uffdd\037\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002" +
    "\000\024\005\uffd6\036\uffd6\037\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\001\002\000\004\011\057" +
    "\001\002\000\004\011\060\001\002\000\004\011\061\001" +
    "\002\000\076\005\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\056\uffa6\057\uffa6\060\uffa6\064\uffa6\065" +
    "\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002" +
    "\000\026\005\uffde\006\063\036\uffde\037\uffde\045\uffde\046" +
    "\uffde\047\uffde\056\uffde\057\uffde\060\uffde\001\002\000\010" +
    "\052\045\053\043\054\042\001\002\000\024\005\uffdc\036" +
    "\uffdc\037\uffdc\045\uffdc\046\uffdc\047\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\001\002\000\024\015\067\023\074\025\077\026" +
    "\066\027\076\030\073\031\072\032\100\033\070\001\002" +
    "\000\004\011\036\001\002\000\004\006\151\001\002\000" +
    "\004\011\102\001\002\000\026\005\145\015\067\023\074" +
    "\025\077\026\066\027\076\030\073\031\072\032\100\033" +
    "\070\001\002\000\004\011\102\001\002\000\004\011\142" +
    "\001\002\000\004\010\110\001\002\000\026\005\uffc1\015" +
    "\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\001\002\000\004\010\107\001\002\000" +
    "\004\010\106\001\002\000\004\011\102\001\002\000\026" +
    "\005\uffba\015\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\001\002\000\004\011\103" +
    "\001\002\000\004\011\104\001\002\000\004\011\105\001" +
    "\002\000\030\005\uffa7\011\uffa7\015\uffa7\023\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\001" +
    "\002\000\026\005\uffbf\015\uffbf\023\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\001\002\000" +
    "\026\005\uffbd\015\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\001\002\000\004\004" +
    "\111\001\002\000\026\034\125\035\121\036\120\037\113" +
    "\040\115\041\122\042\114\043\117\044\112\047\123\001" +
    "\002\000\004\010\141\001\002\000\004\011\056\001\002" +
    "\000\004\006\137\001\002\000\004\011\036\001\002\000" +
    "\030\005\134\034\125\035\121\036\120\037\113\040\115" +
    "\041\122\042\114\043\117\044\112\047\123\001\002\000" +
    "\004\006\133\001\002\000\004\011\036\001\002\000\004" +
    "\010\131\001\002\000\004\006\130\001\002\000\004\011" +
    "\036\001\002\000\030\005\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\047" +
    "\uffb6\001\002\000\004\010\126\001\002\000\030\005\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\047\uffb4\001\002\000\030\005\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\047\uffb1\001\002\000\030\005\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\047\uffae\001\002\000\030\005\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\047\uffb3\001\002\000\030\005\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\047\uffb2\001\002\000\030\005\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\047\uffac\001\002\000\026\005\uffb8" +
    "\015\uffb8\023\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\001\002\000\030\005\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\047\uffb5\001\002\000\030\005\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\047\uffaf\001\002\000\030\005\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\047\uffad\001\002\000\030\005\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\047\uffb0\001\002\000\030\005\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\047\uffab\001\002\000\026\005\uffbc\015\uffbc" +
    "\023\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\001\002\000\026\005\uffbb\015\uffbb\023\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\001\002\000\026\005\uffc0\015\uffc0\023\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\001" +
    "\002\000\020\005\ufffd\013\ufffd\024\ufffd\051\ufffd\055\ufffd" +
    "\062\ufffd\063\ufffd\001\002\000\004\011\102\001\002\000" +
    "\004\011\036\001\002\000\026\005\uffb9\015\uffb9\023\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\001\002\000\026\005\uffb7\015\uffb7\023\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\001" +
    "\002\000\026\005\uffbe\015\uffbe\023\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\001\002\000" +
    "\012\051\154\055\157\062\160\063\155\001\002\000\004" +
    "\004\257\001\002\000\004\004\243\001\002\000\014\005" +
    "\ufff7\051\ufff7\055\ufff7\062\ufff7\063\ufff7\001\002\000\004" +
    "\004\167\001\002\000\004\004\164\001\002\000\014\005" +
    "\163\051\154\055\157\062\160\063\155\001\002\000\014" +
    "\005\ufff6\051\ufff6\055\ufff6\062\ufff6\063\ufff6\001\002\000" +
    "\020\005\ufff8\013\ufff8\024\ufff8\051\ufff8\055\ufff8\062\ufff8" +
    "\063\ufff8\001\002\000\022\036\024\037\022\045\026\046" +
    "\027\047\030\056\021\057\023\060\025\001\002\000\024" +
    "\005\166\036\024\037\022\045\026\046\027\047\030\056" +
    "\021\057\023\060\025\001\002\000\014\005\ufff3\051\ufff3" +
    "\055\ufff3\062\ufff3\063\ufff3\001\002\000\032\036\174\037" +
    "\171\045\176\046\200\047\202\056\170\057\172\064\204" +
    "\065\173\066\201\067\175\070\177\001\002\000\004\010" +
    "\240\001\002\000\004\011\056\001\002\000\004\011\036" +
    "\001\002\000\004\010\232\001\002\000\004\011\036\001" +
    "\002\000\004\010\226\001\002\000\004\006\224\001\002" +
    "\000\004\010\216\001\002\000\004\006\214\001\002\000" +
    "\004\010\212\001\002\000\004\011\036\001\002\000\034" +
    "\005\ufff1\036\ufff1\037\ufff1\045\ufff1\046\ufff1\047\ufff1\056" +
    "\ufff1\057\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\001\002\000\004\010\210\001\002\000\034\005\206\036" +
    "\174\037\171\045\176\046\200\047\202\056\170\057\172" +
    "\064\204\065\173\066\201\067\175\070\177\001\002\000" +
    "\014\005\ufff4\051\ufff4\055\ufff4\062\ufff4\063\ufff4\001\002" +
    "\000\034\005\ufff0\036\ufff0\037\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\056\ufff0\057\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0" +
    "\070\ufff0\001\002\000\034\005\uffed\036\uffed\037\uffed\045" +
    "\uffed\046\uffed\047\uffed\056\uffed\057\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\001\002\000\034\005\uffea\036" +
    "\uffea\037\uffea\045\uffea\046\uffea\047\uffea\056\uffea\057\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\001\002\000" +
    "\004\010\213\001\002\000\034\005\uffeb\036\uffeb\037\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\056\uffeb\057\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\001\002\000\010\052\045" +
    "\053\043\054\042\001\002\000\034\005\uffe2\036\uffe2\037" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\056\uffe2\057\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\070\uffe2\001\002\000\004\011" +
    "\220\001\002\000\004\006\222\001\002\000\004\011\221" +
    "\001\002\000\004\006\uffaa\001\002\000\010\052\045\053" +
    "\043\054\042\001\002\000\034\005\uffee\036\uffee\037\uffee" +
    "\045\uffee\046\uffee\047\uffee\056\uffee\057\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\070\uffee\001\002\000\010\052\045" +
    "\053\043\054\042\001\002\000\034\005\uffe3\036\uffe3\037" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\056\uffe3\057\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\001\002\000\004\006" +
    "\227\001\002\000\010\052\045\053\043\054\042\001\002" +
    "\000\034\005\uffef\036\uffef\037\uffef\045\uffef\046\uffef\047" +
    "\uffef\056\uffef\057\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\001\002\000\034\005\uffe9\036\uffe9\037\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\056\uffe9\057\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\001\002\000\004\011\036\001" +
    "\002\000\034\005\uffec\036\uffec\037\uffec\045\uffec\046\uffec" +
    "\047\uffec\056\uffec\057\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\070\uffec\001\002\000\036\005\uffe7\006\235\036\uffe7" +
    "\037\uffe7\045\uffe7\046\uffe7\047\uffe7\056\uffe7\057\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\001\002\000\010" +
    "\052\045\053\043\054\042\001\002\000\034\005\uffe5\036" +
    "\uffe5\037\uffe5\045\uffe5\046\uffe5\047\uffe5\056\uffe5\057\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\001\002\000" +
    "\034\005\uffe8\036\uffe8\037\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\056\uffe8\057\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\001\002\000\036\005\uffe6\006\241\036\uffe6\037\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\056\uffe6\057\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\001\002\000\010\052\045" +
    "\053\043\054\042\001\002\000\034\005\uffe4\036\uffe4\037" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\056\uffe4\057\uffe4\064\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\070\uffe4\001\002\000\010\045" +
    "\246\046\247\061\250\001\002\000\012\005\256\045\246" +
    "\046\247\061\250\001\002\000\012\005\uffd5\045\uffd5\046" +
    "\uffd5\061\uffd5\001\002\000\004\006\253\001\002\000\004" +
    "\006\251\001\002\000\012\005\uffd3\045\uffd3\046\uffd3\061" +
    "\uffd3\001\002\000\010\052\045\053\043\054\042\001\002" +
    "\000\012\005\uffd1\045\uffd1\046\uffd1\061\uffd1\001\002\000" +
    "\010\052\045\053\043\054\042\001\002\000\012\005\uffd2" +
    "\045\uffd2\046\uffd2\061\uffd2\001\002\000\012\005\uffd4\045" +
    "\uffd4\046\uffd4\061\uffd4\001\002\000\014\005\ufff2\051\ufff2" +
    "\055\ufff2\062\ufff2\063\ufff2\001\002\000\034\016\276\017" +
    "\270\020\275\021\272\022\262\023\265\036\264\045\266" +
    "\046\267\047\274\050\263\071\273\072\261\001\002\000" +
    "\036\005\322\016\276\017\270\020\275\021\272\022\262" +
    "\023\265\036\264\045\266\046\267\047\274\050\263\071" +
    "\273\072\261\001\002\000\004\010\321\001\002\000\004" +
    "\006\317\001\002\000\004\010\316\001\002\000\004\011" +
    "\036\001\002\000\004\010\311\001\002\000\004\006\307" +
    "\001\002\000\004\006\305\001\002\000\004\011\304\001" +
    "\002\000\036\005\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\036\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\071\uffd0\072\uffd0\001\002\000\004\011\056\001\002" +
    "\000\004\010\302\001\002\000\004\011\036\001\002\000" +
    "\004\011\036\001\002\000\004\011\277\001\002\000\036" +
    "\005\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\036\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\071\uffcd" +
    "\072\uffcd\001\002\000\036\005\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\036\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\071\uffcb\072\uffcb\001\002\000\036\005" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\036\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\071\uffc3\072" +
    "\uffc3\001\002\000\036\005\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\036\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\071\uffc5\072\uffc5\001\002\000\036\005\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\036" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\071\uffca\072\uffca" +
    "\001\002\000\036\005\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\036\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\071\uffcc\072\uffcc\001\002\000\010\052\045\053" +
    "\043\054\042\001\002\000\036\005\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\036\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\071\uffc7\072\uffc7\001\002\000\010" +
    "\052\045\053\043\054\042\001\002\000\036\005\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\036\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\071\uffc8\072\uffc8\001" +
    "\002\000\004\004\312\001\002\000\026\034\125\035\121" +
    "\036\120\037\113\040\115\041\122\042\114\043\117\044" +
    "\112\047\123\001\002\000\030\005\314\034\125\035\121" +
    "\036\120\037\113\040\115\041\122\042\114\043\117\044" +
    "\112\047\123\001\002\000\036\005\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\036\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\071\uffc6\072\uffc6\001\002\000\036" +
    "\005\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\036\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\071\uffc2" +
    "\072\uffc2\001\002\000\036\005\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\036\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\071\uffce\072\uffce\001\002\000\010\052" +
    "\045\053\043\054\042\001\002\000\036\005\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\036\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\071\uffc9\072\uffc9\001\002" +
    "\000\036\005\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\036\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\071\uffc4\072\uffc4\001\002\000\014\005\ufff5\051\ufff5\055" +
    "\ufff5\062\ufff5\063\ufff5\001\002\000\036\005\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\036\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\071\uffcf\072\uffcf\001\002" +
    "\000\032\036\174\037\171\045\176\046\200\047\202\056" +
    "\170\057\172\064\204\065\173\066\201\067\175\070\177" +
    "\001\002\000\034\005\326\036\174\037\171\045\176\046" +
    "\200\047\202\056\170\057\172\064\204\065\173\066\201" +
    "\067\175\070\177\001\002\000\020\005\ufffb\013\ufffb\024" +
    "\ufffb\051\ufffb\055\ufffb\062\ufffb\063\ufffb\001\002\000\010" +
    "\045\246\046\247\061\250\001\002\000\012\005\331\045" +
    "\246\046\247\061\250\001\002\000\020\005\ufff9\013\ufff9" +
    "\024\ufff9\051\ufff9\055\ufff9\062\ufff9\063\ufff9\001\002\000" +
    "\034\016\276\017\270\020\275\021\272\022\262\023\265" +
    "\036\264\045\266\046\267\047\274\050\263\071\273\072" +
    "\261\001\002\000\036\005\334\016\276\017\270\020\275" +
    "\021\272\022\262\023\265\036\264\045\266\046\267\047" +
    "\274\050\263\071\273\072\261\001\002\000\020\005\ufffc" +
    "\013\ufffc\024\ufffc\051\ufffc\055\ufffc\062\ufffc\063\ufffc\001" +
    "\002\000\020\005\ufffe\013\ufffe\024\ufffe\051\ufffe\055\ufffe" +
    "\062\ufffe\063\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\007\005\014" +
    "\001\001\000\004\005\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\031\016\030\001\001\000\002\001\001\000\004\024\054" +
    "\001\001\000\004\022\051\001\001\000\004\022\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\034\001\001\000\004\015\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\063\001\001\000\002\001\001\000\006" +
    "\002\070\006\074\001\001\000\004\022\151\001\001\000" +
    "\002\001\001\000\004\025\145\001\001\000\004\006\143" +
    "\001\001\000\004\025\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\115\012\123\001\001\000\002\001\001" +
    "\000\004\024\137\001\001\000\002\001\001\000\004\022" +
    "\135\001\001\000\004\012\134\001\001\000\002\001\001" +
    "\000\004\022\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\146\001\001\000\004\022\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\160\027\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\031\016\164\001\001\000\004\015" +
    "\033\001\001\000\002\001\001\000\006\013\202\014\204" +
    "\001\001\000\002\001\001\000\004\024\236\001\001\000" +
    "\004\022\233\001\001\000\002\001\001\000\004\022\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\214\001\001\000\002\001\001\000\004" +
    "\021\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\222\001\001\000\002\001\001" +
    "\000\004\030\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\241\001" +
    "\001\000\002\001\001\000\006\017\244\020\243\001\001" +
    "\000\004\017\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\251" +
    "\001\001\000\002\001\001\000\004\030\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\270\010\257\001\001\000\004\007\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\302\001\001\000\002\001\001\000\004\022\300\001" +
    "\001\000\004\022\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\305" +
    "\001\001\000\002\001\001\000\004\030\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\312\012\123" +
    "\001\001\000\004\012\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\202\014\324\001\001\000\004" +
    "\013\206\001\001\000\002\001\001\000\006\017\244\020" +
    "\327\001\001\000\004\017\254\001\001\000\002\001\001" +
    "\000\006\007\270\010\332\001\001\000\004\007\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 /*_scanner.init();*/              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script_type ::= CUTSCENE STRING_LITERAL BRACE_OPEN event_list BRACE_CLOSE 
            {
              Cutscene RESULT =null;
		int cutsceneNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cutsceneNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cutsceneName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eventListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eventListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Event> eventList = (ArrayList<Event>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cutscene(cutsceneName, eventList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("script_type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script_type EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cutscene start_val = (Cutscene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // event_list ::= event 
            {
              ArrayList<Event> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Event e = (Event)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // event_list ::= event_list event 
            {
              ArrayList<Event> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Event> el = (ArrayList<Event>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Event e = (Event)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // event ::= INITIAL_CONDS BRACE_OPEN initial_conds_param_list BRACE_CLOSE 
            {
              Event RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ArrayList<Param>> pl = (HashMap<String,ArrayList<Param>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 InitialConds ic = new InitialConds(pl); RESULT = ic; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // event ::= obj_event BRACE_OPEN obj_event_param_list BRACE_CLOSE 
            {
              Event RESULT =null;
		int objEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int objEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ObjectEvent objEvent = (ObjectEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ArrayList<Param>> pl = (HashMap<String,ArrayList<Param>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ObjectEvent oe = new ObjectEvent(pl); RESULT = oe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // event ::= camera_event BRACE_OPEN camera_event_param_list BRACE_CLOSE 
            {
              Event RESULT =null;
		int cameraEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cameraEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraEvent cameraEvent = (CameraEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> pl = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 CameraEvent ce = new CameraEvent(pl); RESULT = ce; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // event ::= camera_attach_event BRACE_OPEN camera_attach_event_param_list BRACE_CLOSE 
            {
              Event RESULT =null;
		int cameraEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cameraEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraAttachEvent cameraEvent = (CameraAttachEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> pl = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 CameraAttachEvent ce = new CameraAttachEvent(pl); RESULT = ce; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // event ::= camera_detach_event BRACE_OPEN camera_detach_event_param_list BRACE_CLOSE 
            {
              Event RESULT =null;
		int cameraEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cameraEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraDetachEvent cameraEvent = (CameraDetachEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> pl = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 CameraDetachEvent ce = new CameraDetachEvent(pl); RESULT = ce; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // event ::= parallel_task BRACE_OPEN parallel_event_param_list BRACE_CLOSE 
            {
              Event RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DelayedEvent> pl = (ArrayList<DelayedEvent>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ParallelTask parallelTask = new ParallelTask(pl); RESULT = parallelTask;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parallel_event_param_list ::= parallel_event 
            {
              ArrayList<DelayedEvent> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DelayedEvent e = (DelayedEvent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parallel_event_param_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parallel_event_param_list ::= parallel_event_param_list parallel_event 
            {
              ArrayList<DelayedEvent> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DelayedEvent> el = (ArrayList<DelayedEvent>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DelayedEvent e = (DelayedEvent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parallel_event_param_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parallel_event ::= obj_event BRACE_OPEN obj_event_param_list BRACE_CLOSE 
            {
              DelayedEvent RESULT =null;
		int objEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int objEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ObjectEvent objEvent = (ObjectEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ArrayList<Param>> pl = (HashMap<String,ArrayList<Param>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ObjectEvent oe = new ObjectEvent(pl); RESULT = oe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parallel_event",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parallel_event ::= camera_event BRACE_OPEN camera_event_param_list BRACE_CLOSE 
            {
              DelayedEvent RESULT =null;
		int cameraEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cameraEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraEvent cameraEvent = (CameraEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> pl = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 CameraEvent ce = new CameraEvent(pl); RESULT = ce; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parallel_event",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parallel_event ::= camera_attach_event BRACE_OPEN camera_attach_event_param_list BRACE_CLOSE 
            {
              DelayedEvent RESULT =null;
		int cameraEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cameraEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraAttachEvent cameraEvent = (CameraAttachEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> pl = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 CameraAttachEvent ce = new CameraAttachEvent(pl); RESULT = ce; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parallel_event",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parallel_event ::= camera_detach_event BRACE_OPEN camera_detach_event_param_list BRACE_CLOSE 
            {
              DelayedEvent RESULT =null;
		int cameraEventleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cameraEventright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraDetachEvent cameraEvent = (CameraDetachEvent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> pl = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 CameraDetachEvent ce = new CameraDetachEvent(pl); RESULT = ce; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parallel_event",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // camera_event_param_list ::= camera_event_param 
            {
              HashMap<String,Param> RESULT =null;
		int cepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param cep = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put(cep.name, cep);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // camera_event_param_list ::= camera_event_param_list camera_event_param 
            {
              HashMap<String,Param> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> paramList = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 paramList.put(p.name, p); RESULT = paramList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // camera_event_param ::= show_text STRING_LITERAL NUMBER time 
            {
              Param RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ShowText o = (ShowText)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShowText(text, n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // camera_event_param ::= show_text_pos STRING_LITERAL vector2 NUMBER time 
            {
              Param RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ENG_Vector2D pos = (ENG_Vector2D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShowText(text, pos, n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // camera_event_param ::= play_sound STRING_LITERAL 
            {
              Param RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlaySound ps = (PlaySound)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlaySound(filename); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // camera_event_param ::= play_sound_from_pos STRING_LITERAL vector3 
            {
              Param RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PlaySound cs = (PlaySound)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D pos = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlaySound(filename, pos); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // camera_event_param ::= play_sound_from_obj_pos STRING_LITERAL STRING_LITERAL 
            {
              Param RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PlaySound ct = (PlaySound)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int objNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int objNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String objName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlaySound(filename, objName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // camera_event_param ::= pos vector3 
            {
              Param RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Position(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // camera_event_param ::= position vector3 
            {
              Param RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Position(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // camera_event_param ::= orientation quaternion 
            {
              Param RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Orientation o = (Orientation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Quaternion q = (ENG_Quaternion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Orientation(q); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // camera_event_param ::= look_at_pos vector3 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // camera_event_param ::= look_at STRING_LITERAL 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // camera_event_param ::= look_at_pos vector3 NUMBER time 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(v, n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // camera_event_param ::= look_at STRING_LITERAL NUMBER time 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(name, n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // camera_event_param ::= start_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayStart(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // camera_event_param ::= end_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayEnd(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_event_param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // camera_attach_event_param_list ::= camera_attach_event_param 
            {
              HashMap<String,Param> RESULT =null;
		int cepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param cep = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put(cep.name, cep);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // camera_attach_event_param_list ::= camera_attach_event_param_list camera_attach_event_param 
            {
              HashMap<String,Param> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> paramList = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 paramList.put(p.name, p); RESULT = paramList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // camera_attach_event_param ::= look_at_pos vector3 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // camera_attach_event_param ::= look_at STRING_LITERAL 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // camera_attach_event_param ::= look_at_pos vector3 NUMBER time 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(v, n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // camera_attach_event_param ::= look_at STRING_LITERAL NUMBER time 
            {
              Param RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CameraLookAt la = (CameraLookAt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraLookAt(name, n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // camera_attach_event_param ::= attach STRING_LITERAL 
            {
              Param RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CameraAttach a = (CameraAttach)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraAttach(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // camera_attach_event_param ::= start_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayStart(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // camera_attach_event_param ::= end_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayEnd(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // camera_attach_event_param ::= pos vector3 
            {
              Param RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Position(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // camera_attach_event_param ::= position vector3 
            {
              Param RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Position(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // camera_attach_event_param ::= orientation quaternion 
            {
              Param RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Orientation o = (Orientation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Quaternion q = (ENG_Quaternion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Orientation(q); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_attach_event_param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // camera_detach_event_param_list ::= camera_detach_event_param 
            {
              HashMap<String,Param> RESULT =null;
		int cepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param cep = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put(cep.name, cep);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_detach_event_param_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // camera_detach_event_param_list ::= camera_detach_event_param_list camera_detach_event_param 
            {
              HashMap<String,Param> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Param> paramList = (HashMap<String,Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 paramList.put(p.name, p); RESULT = paramList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_detach_event_param_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // camera_detach_event_param ::= detach 
            {
              Param RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CameraDetach d = (CameraDetach)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CameraDetach(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_detach_event_param",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // camera_detach_event_param ::= start_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayStart(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_detach_event_param",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // camera_detach_event_param ::= end_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayEnd(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("camera_detach_event_param",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // obj_event_param_list ::= obj_event_param 
            {
              HashMap<String,ArrayList<Param>> RESULT =null;
		int oepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param oep = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashMap<>(); ArrayList<Param> paramList = new ArrayList<>(); paramList.add(oep); RESULT.put(oep.name, paramList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // obj_event_param_list ::= obj_event_param_list obj_event_param 
            {
              HashMap<String,ArrayList<Param>> RESULT =null;
		int oeplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ArrayList<Param>> oepl = (HashMap<String,ArrayList<Param>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList paramList = oepl.get(p.name); if (paramList == null) { paramList = new ArrayList<>(); } oepl.put(p.name, paramList); paramList.add(p); RESULT = oepl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // obj_event_param ::= object STRING_LITERAL 
            {
              Param RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GameObject o = (GameObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GameObject(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // obj_event_param ::= set_speed FLOAT 
            {
              Param RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetSpeed ss = (SetSpeed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int speedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int speedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float speed = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetSpeed(speed); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // obj_event_param ::= change_speed FLOAT 
            {
              Param RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ChangeSpeed cs = (ChangeSpeed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int speedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int speedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float speed = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ChangeSpeed(speed); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // obj_event_param ::= change_position vector3 
            {
              Param RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D vec = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ChangePosition(vec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // obj_event_param ::= change_orientation quaternion 
            {
              Param RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Quaternion q = (ENG_Quaternion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ChangeOrientation(q); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // obj_event_param ::= completion_time NUMBER time 
            {
              Param RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CompletionTime ct = (CompletionTime)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer time = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int timeTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timeTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String timeType = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompletionTime(time, timeType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // obj_event_param ::= start_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayStart(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // obj_event_param ::= end_delay NUMBER time 
            {
              Param RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayEnd(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // obj_event_param ::= obj_def STRING_LITERAL BRACE_OPEN obj_def_param_list BRACE_CLOSE 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int odplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ObjectDefinitionParam> odpl = (HashMap<String,ObjectDefinitionParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjDefinition(name, odpl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // obj_event_param ::= spawn STRING_LITERAL 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Spawn(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // obj_event_param ::= exit STRING_LITERAL 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exit(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // obj_event_param ::= pos vector3 
            {
              Param RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Position(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // obj_event_param ::= position vector3 
            {
              Param RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D v = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Position(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_event_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // initial_conds_param_list ::= initial_conds_param 
            {
              HashMap<String,ArrayList<Param>> RESULT =null;
		int icpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int icpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param icp = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashMap<>(); ArrayList<Param> paramList = new ArrayList<>(); paramList.add(icp); RESULT.put(icp.name, paramList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // initial_conds_param_list ::= initial_conds_param_list initial_conds_param 
            {
              HashMap<String,ArrayList<Param>> RESULT =null;
		int icplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int icplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ArrayList<Param>> icpl = (HashMap<String,ArrayList<Param>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int icpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int icpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param icp = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList paramList = icpl.get(icp.name); if (paramList == null) { paramList = new ArrayList<>(); icpl.put(icp.name, paramList); } paramList.add(icp); RESULT = icpl;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // initial_conds_param ::= skybox STRING_LITERAL 
            {
              Param RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Skybox s = (Skybox)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Skybox(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // initial_conds_param ::= light_dir vector3 
            {
              Param RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LightDir ld = (LightDir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D vec = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LightDir(vec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // initial_conds_param ::= light_type STRING_LITERAL 
            {
              Param RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LightType lt = (LightType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LightType(type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // initial_conds_param ::= light_power_scale FLOAT 
            {
              Param RESULT =null;
		int lpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LightPowerScale lps = (LightPowerScale)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LightPowerScale(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // initial_conds_param ::= light_diffuse_color colour 
            {
              Param RESULT =null;
		int ldcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LightDiffuseColor ldc = (LightDiffuseColor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_ColorValue c = (ENG_ColorValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LightDiffuseColor(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // initial_conds_param ::= light_specular_color colour 
            {
              Param RESULT =null;
		int lscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LightSpecularColor lsc = (LightSpecularColor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_ColorValue c = (ENG_ColorValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LightSpecularColor(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // initial_conds_param ::= ambient_light_upperhemi_lowerhemi_dir colour colour vector3 
            {
              Param RESULT =null;
		int alulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AmbientLight alul = (AmbientLight)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int upperleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int upperright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ENG_ColorValue upper = (ENG_ColorValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lowerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lowerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ENG_ColorValue lower = (ENG_ColorValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D dir = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AmbientLight(upper, lower, dir); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // initial_conds_param ::= obj_def STRING_LITERAL BRACE_OPEN obj_def_param_list BRACE_CLOSE 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int odplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ObjectDefinitionParam> odpl = (HashMap<String,ObjectDefinitionParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjDefinition(name, odpl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // initial_conds_param ::= use_skybox_data_from_level NUMBER 
            {
              Param RESULT =null;
		int ussflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ussflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UseSkyboxDataFromLevel ussfl = (UseSkyboxDataFromLevel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UseSkyboxDataFromLevel(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_conds_param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // obj_def_param_list ::= obj_def_param 
            {
              HashMap<String,ObjectDefinitionParam> RESULT =null;
		int odpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int odpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjectDefinitionParam odp = (ObjectDefinitionParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put(odp.name, odp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // obj_def_param_list ::= obj_def_param_list obj_def_param 
            {
              HashMap<String,ObjectDefinitionParam> RESULT =null;
		int odplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,ObjectDefinitionParam> odpl = (HashMap<String,ObjectDefinitionParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int odpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int odpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjectDefinitionParam odp = (ObjectDefinitionParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 odpl.put(odp.name, odp); RESULT = odpl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // obj_def_param ::= mesh STRING_LITERAL 
            {
              ObjectDefinitionParam RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MeshName m = (MeshName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MeshName(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // obj_def_param ::= type STRING_LITERAL 
            {
              ObjectDefinitionParam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ObjType t = (ObjType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjType(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // obj_def_param ::= position vector3 
            {
              ObjectDefinitionParam RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D pos = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjPosition(pos); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // obj_def_param ::= pos vector3 
            {
              ObjectDefinitionParam RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D pos = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjPosition(pos); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // obj_def_param ::= orientation quaternion 
            {
              ObjectDefinitionParam RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Orientation o = (Orientation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Quaternion q = (ENG_Quaternion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Orientation(q); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // obj_def_param ::= speed vector3 
            {
              ObjectDefinitionParam RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Speed s = (Speed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ENG_Vector3D vec = (ENG_Vector3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Speed(vec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // obj_def_param ::= ai NUMBER 
            {
              ObjectDefinitionParam RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ai a = (Ai)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ai(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // obj_def_param ::= friendly NUMBER 
            {
              ObjectDefinitionParam RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Team f = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Team(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // obj_def_param ::= health NUMBER 
            {
              ObjectDefinitionParam RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Health h = (Health)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Health(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // obj_def_param ::= behavior STRING_LITERAL 
            {
              ObjectDefinitionParam RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Behavior b = (Behavior)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Behavior(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_def_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vector2 ::= FLOAT FLOAT 
            {
              ENG_Vector2D RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ENG_Vector2D(x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vector3 ::= FLOAT FLOAT FLOAT 
            {
              ENG_Vector3D RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float z = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ENG_Vector3D(x, y, z); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vector4 ::= FLOAT FLOAT FLOAT FLOAT 
            {
              ENG_Vector4D RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float z = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float w = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ENG_Vector4D(x, y, z, w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector4",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // colour ::= FLOAT FLOAT FLOAT FLOAT 
            {
              ENG_ColorValue RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float z = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float w = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ENG_ColorValue(x, y, z, w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colour",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // quaternion ::= FLOAT FLOAT FLOAT FLOAT 
            {
              ENG_Quaternion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float z = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int angleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int angleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float angle = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ENG_Quaternion(); ENG_Quaternion.fromAngleAxisDeg(angle, new ENG_Vector4D(x, y, z, 0.0f).normalizedCopy(), RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quaternion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // time ::= ms 
            {
              String RESULT =null;
		 RESULT = "ms"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // time ::= msecs 
            {
              String RESULT =null;
		 RESULT = "ms"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // time ::= secs 
            {
              String RESULT =null;
		 RESULT = "secs"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
